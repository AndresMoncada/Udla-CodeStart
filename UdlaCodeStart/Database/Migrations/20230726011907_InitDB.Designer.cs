// <auto-generated />
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(UcsContext))]
    [Migration("20230726011907_InitDB")]
    partial class InitDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Database.Answer", b =>
                {
                    b.Property<int>("IdAnswer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAnswer"));

                    b.Property<int>("IdQuestion")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("OrderAnswer")
                        .HasColumnType("int");

                    b.HasKey("IdAnswer");

                    b.HasIndex("IdQuestion");

                    b.ToTable("Answer", (string)null);
                });

            modelBuilder.Entity("Database.Complement", b =>
                {
                    b.Property<int>("IdComplement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdComplement"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdMoodle")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdComplement");

                    b.HasIndex("IdMoodle");

                    b.ToTable("Complement", (string)null);
                });

            modelBuilder.Entity("Database.Concept", b =>
                {
                    b.Property<int>("IdConcept")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdConcept"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdTopic")
                        .HasColumnType("int");

                    b.HasKey("IdConcept");

                    b.HasIndex("IdTopic");

                    b.ToTable("Concept", (string)null);
                });

            modelBuilder.Entity("Database.Evaluation", b =>
                {
                    b.Property<int>("IdEvaluation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEvaluation"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdTopic")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IdEvaluation");

                    b.HasIndex("IdTopic");

                    b.ToTable("Evaluation", (string)null);
                });

            modelBuilder.Entity("Database.Example", b =>
                {
                    b.Property<int>("IdExample")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdExample"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdTopic")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdExample");

                    b.HasIndex("IdTopic");

                    b.ToTable("Example", (string)null);
                });

            modelBuilder.Entity("Database.Moodle", b =>
                {
                    b.Property<int>("IdMoodle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMoodle"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("IdMoodle");

                    b.ToTable("Moodle", (string)null);
                });

            modelBuilder.Entity("Database.Question", b =>
                {
                    b.Property<int>("IdQuestion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdQuestion"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdEvaluation")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("IdQuestion");

                    b.HasIndex("IdEvaluation");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("Database.Topic", b =>
                {
                    b.Property<int>("IdTopic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTopic"));

                    b.Property<int>("IdMoodle")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("IdTopic");

                    b.HasIndex("IdMoodle");

                    b.ToTable("Topic", (string)null);
                });

            modelBuilder.Entity("Database.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUser");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Database.User_Evaluation", b =>
                {
                    b.Property<int>("IdUser_Evaluation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser_Evaluation"));

                    b.Property<int>("IdEvaluation")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("IdUser_Evaluation");

                    b.HasIndex("IdEvaluation");

                    b.HasIndex("IdUser");

                    b.ToTable("User_Evaluation", (string)null);
                });

            modelBuilder.Entity("Database.User_Moodle", b =>
                {
                    b.Property<int>("IdUser_Moodle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser_Moodle"));

                    b.Property<int>("IdMoodle")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("IdUser_Moodle");

                    b.HasIndex("IdMoodle");

                    b.HasIndex("IdUser");

                    b.ToTable("User_Moodle", (string)null);
                });

            modelBuilder.Entity("Database.Answer", b =>
                {
                    b.HasOne("Database.Question", "Question")
                        .WithMany()
                        .HasForeignKey("IdQuestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Database.Complement", b =>
                {
                    b.HasOne("Database.Moodle", "Moodle")
                        .WithMany()
                        .HasForeignKey("IdMoodle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moodle");
                });

            modelBuilder.Entity("Database.Concept", b =>
                {
                    b.HasOne("Database.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("IdTopic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Database.Evaluation", b =>
                {
                    b.HasOne("Database.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("IdTopic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Database.Example", b =>
                {
                    b.HasOne("Database.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("IdTopic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Database.Question", b =>
                {
                    b.HasOne("Database.Evaluation", "Evaluation")
                        .WithMany()
                        .HasForeignKey("IdEvaluation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluation");
                });

            modelBuilder.Entity("Database.Topic", b =>
                {
                    b.HasOne("Database.Moodle", "Moodle")
                        .WithMany()
                        .HasForeignKey("IdMoodle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moodle");
                });

            modelBuilder.Entity("Database.User_Evaluation", b =>
                {
                    b.HasOne("Database.Evaluation", "Evaluation")
                        .WithMany()
                        .HasForeignKey("IdEvaluation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.User_Moodle", b =>
                {
                    b.HasOne("Database.Moodle", "Moodle")
                        .WithMany()
                        .HasForeignKey("IdMoodle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moodle");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
